<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:ui="http://schemas.modernwpf.com/2019">
    
    <Style TargetType="Label">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontFamily" Value="Segoe UI Light"/>
        <Setter Property="Foreground" Value="Blue"/>
    </Style>

    <!--<Style TargetType="TextBox">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <Setter Property="Padding" Value="8,0,0,0"/>
    </Style>-->
    
    <!--<ControlTemplate x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
        <Grid>
            <Border
            x:Name="TextBoxStyleBorder"
            CornerRadius="0"
            BorderThickness="2,2,0,2">
                <ScrollViewer x:Name="PART_ContentHost" />
                <Border.Background>
                    <SolidColorBrush Color="White"/>
                </Border.Background>
                <Border.BorderBrush>
                    <SolidColorBrush Color="Black"/>
                </Border.BorderBrush>
            </Border>
        </Grid>
        <ControlTemplate.Resources>
            <VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                <VisualBrush.Visual>
                    <Label Content="Search" Foreground="Red"/>
                </VisualBrush.Visual>
            </VisualBrush>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="IBeam"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="TextBoxStyleBorder" Property="BorderThickness">
                    <Setter.Value>
                        <Thickness Left="2" Top="2" Right="2" Bottom="2"/>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="TextBoxStyleBorder" Property="Padding">
                    <Setter.Value>
                        <Thickness Top="1" Bottom="1" Left="5" Right="0"/>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="TextBoxStyleBorder" Property="BorderBrush">
                    <Setter.Value>
                        <SolidColorBrush Color="#1571CF"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Cursor" Value="Arrow"/>
            </Trigger>

            <Trigger Property="Text" Value="{x:Null}">
                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="White" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->

    <!--<Style TargetType="TextBox" xmlns:sys="clr-namespace:System;assembly=mscorlib">
        <Style.Resources>
            <VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                <VisualBrush.Visual>
                    <Label Content="Search" Foreground="LightGray" />
                </VisualBrush.Visual>
            </VisualBrush>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
            </Trigger>
            <Trigger Property="Text" Value="{x:Null}">
                <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Style TargetType="{x:Type TextBox}" x:Key="SearchBox">
        <Setter Property="Padding" Value="8,0,0,0"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Segoe UI Light"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="TextBoxStyleBorder" CornerRadius="0" BorderThickness="2">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" />
                            <TextBlock x:Name="TextBlock" Text="ФИО сотрудника, название отдела или должность" Foreground="Gray" Padding="8,0,0,0" 
                                       FontFamily="Segoe UI Light" Visibility="Collapsed"/>
                            <!--<Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>-->
                        </Grid>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Black"/>
                        </Border.BorderBrush>
                    </Border>
                        <!--<ControlTemplate.Resources>
                        <VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                            <VisualBrush.Visual>
                                <Label Content="Search" Foreground="Red"/>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </ControlTemplate.Resources>-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="IBeam"/>
                        </Trigger>
                        <Trigger Property="Text" Value="{x:Static system:String.Empty}">
                            <Setter Property="Visibility" TargetName="TextBlock" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="TextBoxStyleBorder" Property="BorderThickness">
                                <Setter.Value>
                                    <Thickness Left="2" Top="2" Right="2" Bottom="2"/>
                                </Setter.Value>
                            </Setter>
                            <!--<Setter TargetName="TextBoxStyleBorder" Property="Padding">
                                <Setter.Value>
                                    <Thickness Top="1" Bottom="1" Left="5" Right="0"/>
                                </Setter.Value>
                            </Setter>-->
                            <Setter TargetName="TextBoxStyleBorder" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="#1571CF"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!--<Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Cursor" Value="Arrow"/>
                        </Trigger>-->

                        <!--<Trigger Property="Text" Value="{x:Null}">
                            <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" Value="White" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button">
        <Setter Property="Background" Value="White"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="2">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="LightGray"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" TargetName="Border" Value="DarkGray"/>
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontFamily" Value="Segoe UI Semibold"></Setter>
        <Setter Property="FontSize" Value="10"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGray"></Setter>
                <Setter Property="Cursor" Value="Hand"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Popup">
        <!--<Setter Property="IsOpen"
                Value="True" />-->
        <!--<Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=FilteredNames,Path=HasItems}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsOpen" Value="False"/>
            </MultiDataTrigger>
        </Style.Triggers>-->
    </Style>

    <Style x:Key="SearchListBox" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Name="Border"
                            BorderThickness="2">
                        <Border.Background>
                            <SolidColorBrush Color="White"/>
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Black"/>
                        </Border.BorderBrush>
                        <ScrollViewer>
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchListBoxItems"
       TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels"
          Value="true" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                Padding="2"
                SnapsToDevicePixels="true"
                            Background="Transparent">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="LightGray"></Setter>
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="LightGray"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--<Style TargetType="Button">
        <Setter Property="Background" Value="White"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,2,2,2">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontFamily" Value="Segoe UI Semibold"></Setter>
        <Setter Property="FontSize" Value="20"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGray"></Setter>
                <Setter Property="Cursor" Value="Hand"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Style x:Key="EmployeesView" TargetType="{x:Type ListBox}">
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <!--<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
          Value="Disabled" />-->
        <Setter Property="VerticalContentAlignment"
          Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Border"
                            BorderThickness="2"
                            Padding="0">
                        <ScrollViewer Padding="0">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftScrollViewer"
       TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Column="1"
                  BorderThickness="0,1,1,1">
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                            </Border.BorderBrush>
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />
                        </Border>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                     Value="{TemplateBinding VerticalOffset}"
                     Maximum="{TemplateBinding ScrollableHeight}"
                     ViewportSize="{TemplateBinding ViewportHeight}"
                     Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                     Orientation="Horizontal"
                     Grid.Row="1"
                     Grid.Column="1"
                     Value="{TemplateBinding HorizontalOffset}"
                     Maximum="{TemplateBinding ScrollableWidth}"
                     ViewportSize="{TemplateBinding ViewportWidth}"
                     Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EmployeesViewItemsStyle"
               TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels"
          Value="true" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />

        <Setter Property="Padding" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border" Margin="-1">
                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsEnabled"
                                Value="false">
                            <Setter TargetName="Border"
                                    Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource DisabledBorderLightColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>-->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="WhiteSmoke"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="Control.PreviewMouseLeftButtonDown">
                            <BeginStoryboard>
                                <Storyboard Storyboard.TargetProperty="(Selector.IsSelected)">
                                    <BooleanAnimationUsingKeyFrames Duration="0:0:0">
                                        <DiscreteBooleanKeyFrame Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter TargetName="Border" Property="Background" Value="WhiteSmoke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="EmployeesExpander" TargetType="Expander">
        
    </Style>-->
    
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="19"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter HorizontalAlignment="Stretch" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Stretch"/>
                            <Path x:Name="arrow" Grid.Column="1" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EmployeesExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <!--<Setter Property="Background" Value="Yellow"/>-->
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <!--<Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>-->
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <!--<Setter Property="Padding" Value="6"/>-->
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>

        <Setter Property="BorderThickness" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <!--<Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Background" Value="WhiteSmoke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="GroupsExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <!--<Setter Property="Margin" Value="20"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border>
                        <Grid Background="Transparent" Height="40">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2"/>
                            <ContentPresenter Grid.Column="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GroupsExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <!--<Setter Property="HorizontalContentAlignment" Value="Stretch"/>-->
        <!--<Setter Property="VerticalContentAlignment" Value="Center"/>-->
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Segoe UI Bold"/>
        <!--<Setter Property="Margin" Value="8"/>-->
        <!--<Setter Property="Padding" Value="40"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource GroupsExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Background" Value="#c4c4c4"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Background" Value="#c4c4c4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBlockInfo" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="Segoe UI light"/>
    </Style>

    <Style x:Key="TextBlockLabel" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="Segoe UI Bold"/>
    </Style>

    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OrdinaryTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI Light"/>
        <Setter Property="FontSize" Value="18"/>
    </Style>

    <Style x:Key="LabelLvl2" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <Setter Property="FontSize" Value="18"/>
    </Style>

    <Style x:Key="OrdinaryTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="8,0,0,0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI Light"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="TextBoxStyleBorder" CornerRadius="0" BorderThickness="2">
                        <ScrollViewer x:Name="PART_ContentHost" />
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Black"/>
                        </Border.BorderBrush>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="IBeam"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="TextBoxStyleBorder" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="#1571CF"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PasswordBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="Padding" Value="8,0,0,0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI Light"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="PasswordBoxStyleBorder" CornerRadius="0" BorderThickness="2" BorderBrush="Black">
                        <ScrollViewer x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="IBeam"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PasswordBoxStyleBorder" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="#1571CF"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="TextBox" x:Key="qwerty">
        <Setter Property="Padding" Value="8,0,0,0"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Segoe UI Light"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="TextBoxStyleBorder"
                            CornerRadius="0"
                            BorderThickness="2">
                        <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost" />
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Black" />
                        </Border.BorderBrush>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="IBeam"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="TextBoxStyleBorder" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="#1571CF"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    
    <Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="{DynamicResource ComboBoxPadding}"/>
        <Setter Property="MaxDropDownHeight" Value="504"/>
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxForeground}"/>
        <Setter Property="Background" Value="{DynamicResource ComboBoxBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ComboBoxBorderThemeThickness}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
        <Setter Property="ui:ComboBoxHelper.TextBoxStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TextBox}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TextBox}">
                                <Grid SnapsToDevicePixels="True">
                                    <Border x:Name="BorderElement" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}"/>
                                    <ScrollViewer x:Name="PART_ContentHost" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" IsTabStop="False" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Style="{DynamicResource TextControlContentHostStyle}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"/>
                                    <TextBlock x:Name="PlaceholderTextContentPresenter" Foreground="{DynamicResource TextControlPlaceholderForeground}" IsHitTestVisible="False" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" Text="{TemplateBinding ui:ControlHelper.PlaceholderText}" Visibility="Collapsed"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Background" TargetName="BorderElement" Value="{DynamicResource TextControlBackgroundDisabled}"/>
                                        <Setter Property="BorderBrush" TargetName="BorderElement" Value="{DynamicResource TextControlBorderBrushDisabled}"/>
                                        <Setter Property="Foreground" TargetName="PART_ContentHost" Value="{DynamicResource TextControlForegroundDisabled}"/>
                                        <Setter Property="Foreground" TargetName="PlaceholderTextContentPresenter" Value="{DynamicResource TextControlPlaceholderForegroundDisabled}"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" TargetName="BorderElement" Value="{DynamicResource TextControlBackgroundPointerOver}"/>
                                        <Setter Property="BorderBrush" TargetName="BorderElement" Value="{DynamicResource TextControlBorderBrushPointerOver}"/>
                                        <Setter Property="Foreground" TargetName="PART_ContentHost" Value="{DynamicResource TextControlForegroundPointerOver}"/>
                                        <Setter Property="Foreground" TargetName="PlaceholderTextContentPresenter" Value="{DynamicResource TextControlPlaceholderForegroundPointerOver}"/>
                                    </Trigger>
                                    <Trigger Property="IsSelectionActive" Value="True">
                                        <Setter Property="Background" TargetName="BorderElement" Value="{DynamicResource TextControlBackgroundFocused}"/>
                                        <Setter Property="BorderBrush" TargetName="BorderElement" Value="{DynamicResource TextControlBorderBrushFocused}"/>
                                        <Setter Property="BorderThickness" TargetName="BorderElement" Value="{DynamicResource TextControlBorderThemeThicknessFocused}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}"/>
                                        <Setter Property="CaretBrush" Value="{DynamicResource TextControlForegroundFocused}"/>
                                        <Setter Property="Foreground" TargetName="PlaceholderTextContentPresenter" Value="{DynamicResource TextControlPlaceholderForegroundFocused}"/>
                                    </Trigger>
                                    <Trigger Property="Text" Value="">
                                        <Setter Property="Visibility" TargetName="PlaceholderTextContentPresenter" Value="Visible"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.BasedOn>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}"/>
                            <Setter Property="Background" Value="{DynamicResource TextControlBackground}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrush}"/>
                            <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}"/>
                            <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThickness}"/>
                            <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}"/>
                            <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}"/>
                            <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
                            <Setter Property="VerticalScrollBarVisibility" Value="Hidden"/>
                            <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False"/>
                            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                            <Setter Property="VerticalContentAlignment" Value="Top"/>
                            <Setter Property="HorizontalContentAlignment" Value="Left"/>
                            <Setter Property="MinHeight" Value="{DynamicResource TextControlThemeMinHeight}"/>
                            <Setter Property="MinWidth" Value="{DynamicResource TextControlThemeMinWidth}"/>
                            <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}"/>
                            <Setter Property="ui:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}"/>
                            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                            <Setter Property="AllowDrop" Value="True"/>
                            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                            <Setter Property="ContextMenu" Value="{DynamicResource TextControlContextMenu}"/>
                            <Setter Property="ui:TextContextMenu.UsingTextContextMenu" Value="True"/>
                            <Setter Property="ui:TextBoxHelper.IsEnabled" Value="True"/>
                            <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource TextControlValidationErrorTemplate}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TextBox}">
                                        <ControlTemplate.Resources>
                                            <Style x:Key="DeleteButtonStyle" TargetType="{x:Type Button}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                            <ControlTemplate.Resources>
                                                                <StreamGeometry x:Key="Cancel">M10.888672,10L17.626953,16.748047 16.748047,17.626953 10,10.888672 3.251953,17.626953 2.373047,16.748047 9.111328,10 2.373047,3.251953 3.251953,2.373047 10,9.111328 16.748047,2.373047 17.626953,3.251953z</StreamGeometry>
                                                            </ControlTemplate.Resources>
                                                            <Border x:Name="ButtonLayoutGrid" BorderBrush="{DynamicResource TextControlButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource TextControlButtonBackground}" CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}" Margin="{DynamicResource TextBoxInnerButtonMargin}">
                                                                <ui:FontIconFallback x:Name="GlyphElement" Data="M10.888672,10L17.626953,16.748047 16.748047,17.626953 10,10.888672 3.251953,17.626953 2.373047,16.748047 9.111328,10 2.373047,3.251953 3.251953,2.373047 10,9.111328 16.748047,2.373047 17.626953,3.251953z" Foreground="{DynamicResource TextControlButtonForeground}" FontStyle="Normal" FontSize="12" FontFamily="{DynamicResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Background" TargetName="ButtonLayoutGrid" Value="{DynamicResource TextControlButtonBackgroundPointerOver}"/>
                                                                    <Setter Property="BorderBrush" TargetName="ButtonLayoutGrid" Value="{DynamicResource TextControlButtonBorderBrushPointerOver}"/>
                                                                    <Setter Property="Foreground" TargetName="GlyphElement" Value="{DynamicResource TextControlButtonForegroundPointerOver}"/>
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="Background" TargetName="ButtonLayoutGrid" Value="{DynamicResource TextControlButtonBackgroundPressed}"/>
                                                                    <Setter Property="BorderBrush" TargetName="ButtonLayoutGrid" Value="{DynamicResource TextControlButtonBorderBrushPressed}"/>
                                                                    <Setter Property="Foreground" TargetName="GlyphElement" Value="{DynamicResource TextControlButtonForegroundPressed}"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Opacity" TargetName="ButtonLayoutGrid" Value="0"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ControlTemplate.Resources>
                                        <Grid SnapsToDevicePixels="True">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="ButtonStates">
                                                    <VisualState x:Name="ButtonVisible">
                                                        <Storyboard>
                                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="DeleteButton">
                                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                                    <DiscreteObjectKeyFrame.Value>
                                                                        <Visibility>Visible</Visibility>
                                                                    </DiscreteObjectKeyFrame.Value>
                                                                </DiscreteObjectKeyFrame>
                                                            </ObjectAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="ButtonCollapsed"/>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <ui:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.ColumnSpan="2" ContentTemplate="{TemplateBinding ui:ControlHelper.HeaderTemplate}" Content="{TemplateBinding ui:ControlHelper.Header}" Grid.Column="0" Foreground="{DynamicResource TextControlHeaderForeground}" FontWeight="Normal" Margin="{DynamicResource TextBoxTopHeaderMargin}" Grid.Row="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding ui:ControlHelper.HeaderVisibility}" VerticalAlignment="Top"/>
                                            <Border x:Name="BorderElement" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Grid.Column="0" CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}" Validation.ErrorTemplate="{x:Null}" ui:ValidationHelper.IsTemplateValidationAdornerSite="True" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" Grid.Row="1" Grid.RowSpan="1" Validation.ValidationAdornerSiteFor="{x:Null}"/>
                                            <ScrollViewer x:Name="PART_ContentHost" Grid.Column="0" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" IsTabStop="False" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Grid.Row="1" Style="{DynamicResource TextControlContentHostStyle}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            <TextBlock x:Name="PlaceholderTextContentPresenter" Grid.ColumnSpan="2" Grid.Column="0" Foreground="{TemplateBinding ui:ControlHelper.PlaceholderForeground}" IsHitTestVisible="False" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Grid.Row="1" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" Text="{TemplateBinding ui:ControlHelper.PlaceholderText}"/>
                                            <Button x:Name="DeleteButton" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="1" ui:ControlHelper.CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}" Focusable="False" FontSize="{TemplateBinding FontSize}" IsTabStop="False" ui:TextBoxHelper.IsDeleteButton="True" Padding="{DynamicResource HelperButtonThemePadding}" Grid.Row="1" Visibility="Collapsed" VerticalAlignment="Stretch" Width="30">
                                                <Button.Style>
                                                    <Style TargetType="{x:Type Button}">
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Button}">
                                                                    <ControlTemplate.Resources>
                                                                        <StreamGeometry x:Key="Cancel">M10.888672,10L17.626953,16.748047 16.748047,17.626953 10,10.888672 3.251953,17.626953 2.373047,16.748047 9.111328,10 2.373047,3.251953 3.251953,2.373047 10,9.111328 16.748047,2.373047 17.626953,3.251953z</StreamGeometry>
                                                                    </ControlTemplate.Resources>
                                                                    <Border x:Name="ButtonLayoutGrid" BorderBrush="{DynamicResource TextControlButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource TextControlButtonBackground}" CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}" Margin="{DynamicResource TextBoxInnerButtonMargin}">
                                                                        <ui:FontIconFallback x:Name="GlyphElement" Data="M10.888672,10L17.626953,16.748047 16.748047,17.626953 10,10.888672 3.251953,17.626953 2.373047,16.748047 9.111328,10 2.373047,3.251953 3.251953,2.373047 10,9.111328 16.748047,2.373047 17.626953,3.251953z" Foreground="{DynamicResource TextControlButtonForeground}" FontStyle="Normal" FontSize="12" FontFamily="{DynamicResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter Property="Background" TargetName="ButtonLayoutGrid" Value="{DynamicResource TextControlButtonBackgroundPointerOver}"/>
                                                                            <Setter Property="BorderBrush" TargetName="ButtonLayoutGrid" Value="{DynamicResource TextControlButtonBorderBrushPointerOver}"/>
                                                                            <Setter Property="Foreground" TargetName="GlyphElement" Value="{DynamicResource TextControlButtonForegroundPointerOver}"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsPressed" Value="True">
                                                                            <Setter Property="Background" TargetName="ButtonLayoutGrid" Value="{DynamicResource TextControlButtonBackgroundPressed}"/>
                                                                            <Setter Property="BorderBrush" TargetName="ButtonLayoutGrid" Value="{DynamicResource TextControlButtonBorderBrushPressed}"/>
                                                                            <Setter Property="Foreground" TargetName="GlyphElement" Value="{DynamicResource TextControlButtonForegroundPressed}"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsEnabled" Value="False">
                                                                            <Setter Property="Opacity" TargetName="ButtonLayoutGrid" Value="0"/>
                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Button.Style>
                                            </Button>
                                            <ContentPresenter x:Name="DescriptionPresenter" Grid.ColumnSpan="2" Content="{TemplateBinding ui:ControlHelper.Description}" Grid.Column="0" TextElement.Foreground="{DynamicResource SystemControlDescriptionTextForegroundBrush}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="{TemplateBinding ui:ControlHelper.DescriptionVisibility}"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="ui:ControlHelper.PlaceholderForeground" Value="{x:Null}">
                                                <Setter Property="Foreground" TargetName="PlaceholderTextContentPresenter" Value="{DynamicResource TextControlPlaceholderForeground}"/>
                                            </Trigger>
                                            <Trigger Property="ui:TextBoxHelper.HasText" Value="True">
                                                <Setter Property="Visibility" TargetName="PlaceholderTextContentPresenter" Value="Collapsed"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Foreground" TargetName="HeaderContentPresenter" Value="{DynamicResource TextControlHeaderForegroundDisabled}"/>
                                                <Setter Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}"/>
                                                <Setter Property="BorderBrush" TargetName="BorderElement" Value="{DynamicResource TextControlBorderBrushDisabled}"/>
                                                <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}"/>
                                                <Setter Property="Foreground" TargetName="PlaceholderTextContentPresenter" Value="{DynamicResource TextControlPlaceholderForegroundDisabled}"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="BorderBrush" TargetName="BorderElement" Value="{DynamicResource TextControlBorderBrushPointerOver}"/>
                                                <Setter Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}"/>
                                                <Setter Property="Foreground" TargetName="PlaceholderTextContentPresenter" Value="{DynamicResource TextControlPlaceholderForegroundPointerOver}"/>
                                                <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}"/>
                                            </Trigger>
                                            <Trigger Property="IsSelectionActive" Value="True">
                                                <Setter Property="Foreground" TargetName="PlaceholderTextContentPresenter" Value="{DynamicResource TextControlPlaceholderForegroundFocused}"/>
                                                <Setter Property="Background" Value="{DynamicResource TextControlBackgroundFocused}"/>
                                                <Setter Property="BorderBrush" TargetName="BorderElement" Value="{DynamicResource TextControlBorderBrushFocused}"/>
                                                <Setter Property="BorderThickness" TargetName="BorderElement" Value="{DynamicResource TextControlBorderThemeThicknessFocused}"/>
                                                <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}"/>
                                            </Trigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                                    <Condition Property="ui:TextBoxHelper.HasText" Value="True"/>
                                                    <Condition Property="IsReadOnly" Value="False"/>
                                                    <Condition Property="AcceptsReturn" Value="False"/>
                                                    <Condition Property="TextWrapping" Value="NoWrap"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="ui:TextBoxHelper.IsDeleteButtonVisible" Value="True"/>
                                            </MultiTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Style.BasedOn>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}"/>
        <Setter Property="ui:ControlHelper.PlaceholderForeground" Value="{DynamicResource ComboBoxPlaceHolderForeground}"/>
        <Setter Property="ui:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource IsApplicationFocusVisualKindReveal}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}"/>
        <Setter Property="ui:ComboBoxHelper.KeepInteriorCornersSquare" Value="True"/>
        <Setter Property="ui:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}"/>
        <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource TextControlValidationErrorTemplate}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ControlTemplate.Resources>
                        <StreamGeometry x:Key="ChevronDown">M18.935547,4.560547L19.814453,5.439453 10,15.253906 0.185547,5.439453 1.064453,4.560547 10,13.496094z</StreamGeometry>
                    </ControlTemplate.Resources>
                    <Grid x:Name="LayoutRoot" SnapsToDevicePixels="True">
                        <Grid.Resources>
                            <!--<Storyboard x:Key="OverlayOpeningAnimation">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Shdw">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.383" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>-->
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="32"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ui:ContentPresenterEx x:Name="HeaderContentPresenter" Grid.ColumnSpan="2" ContentTemplate="{TemplateBinding ui:ControlHelper.HeaderTemplate}" Content="{TemplateBinding ui:ControlHelper.Header}" Grid.Column="0" Foreground="{DynamicResource ComboBoxHeaderForeground}" FontWeight="{DynamicResource ComboBoxHeaderThemeFontWeight}" FlowDirection="{TemplateBinding FlowDirection}" Margin="{DynamicResource ComboBoxTopHeaderMargin}" Grid.Row="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextWrapping="Wrap" Visibility="{TemplateBinding ui:ControlHelper.HeaderVisibility}" VerticalAlignment="Top"/>
                        <Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Grid.Column="0" CornerRadius="0" Validation.ErrorTemplate="{x:Null}" ui:ValidationHelper.IsTemplateValidationAdornerSite="True" MinWidth="{DynamicResource ComboBoxThemeMinWidth}" Grid.Row="1" Validation.ValidationAdornerSiteFor="{x:Null}"/>
                        <Border x:Name="HighlightBackground" BorderBrush="{DynamicResource ComboBoxBackgroundBorderBrushUnfocused}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource ComboBoxBackgroundUnfocused}" Grid.ColumnSpan="2" Grid.Column="0" CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}" Opacity="0" Grid.Row="1"/>
                        <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" Grid.Column="0" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <TextBlock x:Name="PlaceholderTextBlock" Grid.Column="0" Foreground="{TemplateBinding ui:ControlHelper.PlaceholderForeground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Padding="0,0,32,0" Grid.Row="1" Text="{TemplateBinding ui:ControlHelper.PlaceholderText}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <ToggleButton x:Name="ToggleButton" Background="Transparent" Grid.ColumnSpan="2" Grid.Column="0" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="1">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="IsTabStop" Value="False"/>
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="ClickMode" Value="Release"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <TextBox x:Name="PART_EditableTextBox" BorderBrush="Transparent" Grid.ColumnSpan="2" Grid.Column="0" ui:ControlHelper.CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}" HorizontalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" Margin="0" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" ui:ControlHelper.PlaceholderForeground="{TemplateBinding ui:ControlHelper.PlaceholderForeground}" Padding="{DynamicResource ComboBoxEditableTextPadding}" ui:ControlHelper.PlaceholderText="{TemplateBinding ui:ControlHelper.PlaceholderText}" Grid.Row="1" Style="{TemplateBinding ui:ComboBoxHelper.TextBoxStyle}" Visibility="Collapsed" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <ToggleButton x:Name="DropDownOverlay" Background="Transparent" Grid.Column="1" HorizontalAlignment="Right" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,1,1,1" Grid.Row="1" Visibility="Collapsed" Width="30">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="IsTabStop" Value="False"/>
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="ClickMode" Value="Release"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <ui:FontIconFallback x:Name="DropDownGlyph" Grid.Column="1" Data="M18.935547,4.560547L19.814453,5.439453 10,15.253906 0.185547,5.439453 1.064453,4.560547 10,13.496094z" Foreground="{DynamicResource ComboBoxDropDownGlyphForeground}" FontSize="12" FontFamily="{DynamicResource SymbolThemeFontFamily}" HorizontalAlignment="Right" IsHitTestVisible="False" Margin="0,0,10,0" MinHeight="{DynamicResource ComboBoxMinHeight}" Grid.Row="1" VerticalAlignment="Center"/>
                        <ContentPresenter x:Name="DescriptionPresenter" Grid.ColumnSpan="2" Content="{TemplateBinding ui:ControlHelper.Description}" Grid.Column="0" TextElement.Foreground="{DynamicResource SystemControlDescriptionTextForegroundBrush}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="{TemplateBinding ui:ControlHelper.DescriptionVisibility}"/>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="None" Placement="Bottom">
                            <Popup.PlacementRectangle>
                                <MultiBinding UpdateSourceTrigger="Default">
                                    <MultiBinding.Converter>
                                        <ui:PlacementRectangleConverter Margin="0,1"/>
                                    </MultiBinding.Converter>
                                    <Binding ElementName="Background" Path="ActualWidth"/>
                                    <Binding ElementName="Background" Path="ActualHeight"/>
                                </MultiBinding>
                            </Popup.PlacementRectangle>
                            <ui:ThemeShadowChrome x:Name="Shdw" CornerRadius="{Binding CornerRadius, ElementName=PopupBorder}" IsShadowEnabled="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="28.8,28.8,28.8,41.6" MinWidth="{Binding ActualWidth, ElementName=LayoutRoot}">
                                <!--<ui:OpeningAnimationHelper.Storyboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Shdw">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.383" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </ui:OpeningAnimationHelper.Storyboard>-->
                                <Border x:Name="PopupBorder" Background="{DynamicResource ComboBoxDropDownBackground}" CornerRadius="{DynamicResource OverlayCornerRadius}" HorizontalAlignment="Stretch">
                                    <Border BorderBrush="{DynamicResource ComboBoxDropDownBorderBrush}" BorderThickness="{DynamicResource ComboBoxDropdownBorderThickness}" CornerRadius="{Binding CornerRadius, ElementName=PopupBorder}" Padding="{DynamicResource ComboBoxDropdownBorderPadding}">
                                        <ScrollViewer x:Name="ScrollViewer" Foreground="{DynamicResource ComboBoxDropDownForeground}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" Margin="{DynamicResource ComboBoxDropdownContentMargin}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </ScrollViewer>
                                    </Border>
                                </Border>
                            </ui:ThemeShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Background" Value="{DynamicResource ComboBoxBackgroundPointerOver}"/>
                            <Setter Property="BorderBrush" TargetName="Background" Value="{DynamicResource ComboBoxBorderBrushPointerOver}"/>
                            <Setter Property="TextElement.Foreground" TargetName="ContentPresenter" Value="{DynamicResource ComboBoxForegroundPointerOver}"/>
                            <Setter Property="Foreground" TargetName="PlaceholderTextBlock" Value="{DynamicResource ComboBoxPlaceHolderForegroundPointerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="ToggleButton" Value="True">
                            <Setter Property="Background" TargetName="Background" Value="{DynamicResource ComboBoxBackgroundPressed}"/>
                            <Setter Property="BorderBrush" TargetName="Background" Value="{DynamicResource ComboBoxBorderBrushPressed}"/>
                            <Setter Property="TextElement.Foreground" TargetName="ContentPresenter" Value="{DynamicResource ComboBoxForegroundPressed}"/>
                            <Setter Property="Foreground" TargetName="PlaceholderTextBlock" Value="{DynamicResource ComboBoxPlaceHolderForegroundPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Background" Value="{DynamicResource ComboBoxBackgroundDisabled}"/>
                            <Setter Property="BorderBrush" TargetName="Background" Value="{DynamicResource ComboBoxBorderBrushDisabled}"/>
                            <Setter Property="Foreground" TargetName="HeaderContentPresenter" Value="{DynamicResource ComboBoxHeaderForegroundDisabled}"/>
                            <Setter Property="TextElement.Foreground" TargetName="ContentPresenter" Value="{DynamicResource ComboBoxForegroundDisabled}"/>
                            <Setter Property="Foreground" TargetName="PlaceholderTextBlock" Value="{DynamicResource ComboBoxPlaceHolderForegroundDisabled}"/>
                            <Setter Property="Foreground" TargetName="DropDownGlyph" Value="{DynamicResource ComboBoxDropDownGlyphForegroundDisabled}"/>
                        </Trigger>
                        <Trigger Property="ui:FocusVisualHelper.ShowFocusVisual" Value="True">
                            <Setter Property="Opacity" TargetName="HighlightBackground" Value="1"/>
                            <Setter Property="Background" TargetName="HighlightBackground" Value="{DynamicResource ComboBoxBackgroundFocused}"/>
                            <Setter Property="BorderBrush" TargetName="HighlightBackground" Value="{DynamicResource ComboBoxBackgroundBorderBrushFocused}"/>
                            <Setter Property="TextElement.Foreground" TargetName="ContentPresenter" Value="{DynamicResource ComboBoxForegroundFocused}"/>
                            <Setter Property="Foreground" TargetName="PlaceholderTextBlock" Value="{DynamicResource ComboBoxPlaceHolderForegroundFocused}"/>
                            <Setter Property="Foreground" TargetName="DropDownGlyph" Value="{DynamicResource ComboBoxDropDownGlyphForegroundFocused}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ui:FocusVisualHelper.ShowFocusVisual" Value="True"/>
                                <Condition Property="IsPressed" SourceName="ToggleButton" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="HighlightBackground" Value="1"/>
                            <Setter Property="TextElement.Foreground" TargetName="ContentPresenter" Value="{DynamicResource ComboBoxForegroundFocusedPressed}"/>
                            <Setter Property="Foreground" TargetName="PlaceholderTextBlock" Value="{DynamicResource ComboBoxPlaceHolderForegroundFocusedPressed}"/>
                            <Setter Property="Foreground" TargetName="DropDownGlyph" Value="{DynamicResource ComboBoxDropDownGlyphForegroundFocusedPressed}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ui:FocusVisualHelper.ShowFocusVisual" Value="True"/>
                                <Condition Property="IsDropDownOpen" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PopupBorder" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="Visibility" TargetName="ContentPresenter" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="ToggleButton" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="DropDownOverlay" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False"/>
                                <Condition Property="SelectedIndex" Value="-1"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PlaceholderTextBlock" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelectionActive" SourceName="PART_EditableTextBox" Value="True"/>
                                <Condition Property="IsMouseOver" SourceName="DropDownOverlay" Value="False"/>
                                <Condition Property="IsPressed" SourceName="DropDownOverlay" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="DropDownGlyph" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}"/>
                            <Setter Property="Margin" TargetName="DropDownOverlay" Value="0,2,2,2"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelectionActive" SourceName="PART_EditableTextBox" Value="True"/>
                                <Condition Property="IsMouseOver" SourceName="DropDownOverlay" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="DropDownGlyph" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}"/>
                            <Setter Property="Background" TargetName="DropDownOverlay" Value="{DynamicResource ComboBoxFocusedDropDownBackgroundPointerOver}"/>
                            <Setter Property="Margin" TargetName="DropDownOverlay" Value="0,2,2,2"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelectionActive" SourceName="PART_EditableTextBox" Value="True"/>
                                <Condition Property="IsPressed" SourceName="DropDownOverlay" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="DropDownGlyph" Value="{DynamicResource ComboBoxEditableDropDownGlyphForeground}"/>
                            <Setter Property="Background" TargetName="DropDownOverlay" Value="{DynamicResource ComboBoxFocusedDropDownBackgroundPointerPressed}"/>
                            <Setter Property="Margin" TargetName="DropDownOverlay" Value="0,2,2,2"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelectionActive" SourceName="PART_EditableTextBox" Value="False"/>
                                <Condition Property="IsMouseOver" SourceName="DropDownOverlay" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="DropDownOverlay" Value="{DynamicResource ComboBoxDropDownBackgroundPointerOver}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelectionActive" SourceName="PART_EditableTextBox" Value="False"/>
                                <Condition Property="IsPressed" SourceName="DropDownOverlay" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="DropDownOverlay" Value="{DynamicResource ComboBoxDropDownBackgroundPointerPressed}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    

</ResourceDictionary>